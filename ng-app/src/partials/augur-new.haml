.row.new-augur-wizard.action-bar
  .columns.small-12
    %ul.left.action-bar-breadcrumb
      %li
        Set up a new Augur

.row.container.new-augur-wizard
  .small-12.columns
    %form{ name: 'form', novalidate: '', ng: { submit: 'form.$valid && submit()' } }

      .row.step.step-1{ ng: { class: '(step==1) ? "active" : ""' } }
        .small-12.columns
          %a{ href: '', ng: { click: 'step=1' } }
            %h5.subheader.title
              Step 1 - Name and DataSpace
          .body{ ng: { show: 'step==1' } }
            %h6.subheader.subtitle
              Give your augur a unique name and select a DataSpace
            .row.augur-name
              .small-1.columns
                %label.right.inline{ for: 'augur-name' } Name
              .small-3.columns.end{ ng: { class: '{"error" : form.augurName.$error.uniqueAugurName}' } }
                %input#augur-name{ name: 'augurName', placeholder: 'Please enter a name', type: 'text', ng: { model: 'augur.name' }, 'unique-augur-name' => '' }
                %small.error{ ng: { show: 'form.augurName.$error.uniqueAugurName' } } This name already exists
            .row.augur-habitat
              .small-1.columns
                %label.right.inline{ for: 'augur-habitat' } DataSpace
              .small-3.columns.end
                %input#augur-habitat{ name: 'augurHabitat', placeholder: 'Type to search', type: 'text', ng: { model: 'augur.habitat' }, typeahead: 'habitat as habitat.name for habitat in habitats' }
          .next-button
            .next-button-wrap
              %a.tiny.button.radius{ href: '', ng: { disabled: '!stepValid.one || form.augurName.$error.uniqueAugurName', click: 'stepValid.one && (step=2)' } } Next step >

      .row.step.step-2{ ng: { class: '(step==2) ? "active" : ""' } }
        .small-12.columns
          %a{ ng: { click: 'stepValid.one && (step=2)' } }
            %h5.subheader.title
              Step 2 - Select an event table
          .body{ ng: { show: 'step==2' } }
            %h6.subheader.subtitle Select the events table that contains the prediction target

            .row
              .small-12.columns
                %ul.small-block-grid-2.medium-block-grid-3.large-block-grid-4.fact-tables
                  %li{'ng-repeat' => 'factTable in factTables'}
                    %label{ for: '{{ factTable.id }}' }
                      %input{ id: '{{ factTable.id }}', type: 'radio', ng: { model: 'augur.factTable', value: 'factTable' } }
                      .th{ ng: { class: '(augur.factTable==factTable) ? "selected" : ""' } }
                        .fact-body
                          %h8.subheader
                            {{factTable.name}}
                            %span.check-status.glyphicon.glyphicon-check{ ng: { show: 'augur.factTable==factTable' } }
                          %p
                            {{factTable.description}}
          .next-button
            .next-button-wrap
              %a.tiny.button.radius{ href: '', ng: { disabled: '!stepValid.two', click: 'stepValid.two && (step=3)' } } Next step >

      .row.step.step-3{ ng: { class: '(step==3) ? "active" : ""' } }
        .small-12.columns
          %a{ href: '', ng: { click: 'stepValid.two && (step=3)' } }
            %h5.subheader.title
              Step 3 - Define prediction target
          .body{ ng: { show: 'step==3' } }
            %h6.subheader.subtitle
              Enter a comma separated list of IDs to define the prediction events
              .row.events
                .small-9.columns.input
                  %textarea{ name: 'eventIds', placeholder: '{{ augur.factTable.suggestedIds }}', ng: { model: 'augur.eventIds' }, 'available-event' => '' }
                .small-3.columns
                  .validation
                    %h5.subheader Validation
                    .validation-message-show-hide.not-validated{ ng: { show: '!eventIdsValidated' }}
                      %h6 You need to validate your prediction target before continuing
                    .validation-message-show-hide.validated{ ng: { show: 'eventIdsValidated' }}
                      .valid.validation-elements{ ng: { show: 'stepValid.three' }}
                        Your Prediction Target IDs have been verified.
                        .verified.validation-icon
                          %span.glyphicon.glyphicon-ok-circle
                      .invalid.validation-elements{ ng: { show: '!stepValid.three' }}
                        .error{ ng: { show: 'form.eventIds.$error.recognized' } }
                          The following Prediction Target IDs do not exist in the events table:
                          {{ unrecognizedEventIds.join(', ') }}
                        .error{ ng: { show: 'form.eventIds.$error.present' } }
                          You need to provide one or more Prediction Target IDs
                        .error.validation-icon
                          %span.glyphicon.glyphicon-remove-circle
                    .validation-elements.validate-action
                      %a.button.small.radius{ ng: { click: 'validateEventIds()', show: '!stepValid.three' } }
                        Validate

          .next-button
            .next-button-wrap
              %a.tiny.button.radius{ href: '', ng: { disabled: '!stepValid.three', click: 'stepValid.three && (step=4)' } } Next step >

      .row.step.step-4.step-last{ ng: { class: '(step==4) ? "active" : ""' } }
        .small-12.columns
          %a{ href: '', ng: { click: 'stepValid.three && (step=4)' } }
            %h5.subheader.title
              Step 4 - Schedule and trigger settings
          .body{ ng: { show: 'step==4' } }
            %h6.subheader.subtitle
              Set prediction and evaluation schedule, set a key performance indicator and set the automatic learning threshold

            %augur-settings{ augur: 'augur' }

          .next-button
            .next-button-wrap
              %input.tiny.button.radius{ type: 'submit', value: 'Activate Augur >', ng: { disabled: '!stepValid.four || !form.$valid' } }
